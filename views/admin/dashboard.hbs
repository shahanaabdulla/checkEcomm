<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales and Orders Chart</title>
    <!-- Include Chart.js library -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
    <div class="app-wrapper">
        <div class="app-content pt-3 p-md-3 p-lg-4">
            <div class="container-xl">
                <h1 class="app-page-title">Overview</h1>
                <div class="row g-4 mb-4">
                    <div class="col-6 col-lg-3">
                        <div class="app-card app-card-stat shadow-sm h-100">
                            <div class="app-card-body p-3 p-lg-4">
                                <h4 class="stats-type mb-1">Total Sales</h4>
                                <div class="stats-figure" id="totalSales">â‚¹0</div>

                            </div><!--//app-card-body-->
                            <a class="app-card-link-mask" href="#"></a>
                        </div><!--//app-card-->
                    </div><!--//col-->
                    <div class="col-6 col-lg-3">
                        <div class="app-card app-card-stat shadow-sm h-100">
                            <div class="app-card-body p-3 p-lg-4">
                                <h4 class="stats-type mb-1">Total Orders</h4>
                                <div class="stats-figure" id="totalOrders">0</div>

                            </div><!--//app-card-body-->
                            <a class="app-card-link-mask" href="#"></a>
                        </div><!--//app-card-->
                    </div><!--//col-->
                    <div class="col-6 col-lg-3">
                        <div class="app-card app-card-stat shadow-sm h-100">
                            <div class="app-card-body p-3 p-lg-4">
                                <h4 class="stats-type mb-1">Completed Orders</h4>
                                <div class="stats-figure" id="totalDeliveredOrders">0</div>

                            </div><!--//app-card-body-->
                            <a class="app-card-link-mask" href="#"></a>
                        </div><!--//app-card-->
                    </div><!--//<!--//col-->
                    <div class="col-6 col-lg-3">
                        <div class="app-card app-card-stat shadow-sm h-100">
                            <div class="app-card-body p-3 p-lg-4">
                                <h4 class="stats-type mb-1">Pending Orders</h4>
                                <div class="stats-figure" id="totalPendingOrders">0</div>

                            </div><!--//app-card-body-->
                            <a class="app-card-link-mask" href="#"></a>
                        </div><!--//app-card-->
                    </div><!--//<!--//col-->
                </div><!--//row-->

                <div class="row mt-5">
                    <div class="col-md-5 mb-2">
                        <h5>Category wise Sales</h5>
                        <!-- Pie Chart -->
                        <canvas id="pieChart" width="200" height="100"></canvas>
                    </div>

                    <div class="col-md-6 mb-4">
                        <div>
                            <label for="timeFrame">Select Time Frame:</label>
                            <select id="timeFrame" onchange="updateChart()">
                                <option value="daily">Daily</option>
                                <option value="weekly">Weekly</option>
                                <option value="monthly">Monthly</option>
                                <option value="yearly">Yearly</option>
                            </select>
                        </div>
                        <h5 class="barSales"> </h5>
                        <!-- Bar Chart -->
                        <canvas id="salesChart" width="400" height="300" style="margin-right: 40px;"></canvas>
                    </div>
                </div>

                <!-- New section for best-selling products, categories, and brands -->
                <div class="row g-4 mb-4">
                    <div class="col-12 col-lg-4">
                        <div class="app-card shadow-sm">
                            <div class="app-card-header p-3">
                                <h4 class="app-card-title">Best Selling Products</h4>
                            </div>
                            <div class="app-card-body p-3 p-lg-4">
                                <ul id="best-selling-products" class="list-group"></ul>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-lg-4">
                        <div class="app-card shadow-sm">
                            <div class="app-card-header p-3">
                                <h4 class="app-card-title">Best Selling Categories</h4>
                            </div>
                            <div class="app-card-body p-3 p-lg-4">
                                <ul id="best-selling-categories" class="list-group"></ul>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-lg-4">
                        <div class="app-card shadow-sm">
                            <div class="app-card-header p-3">
                                <h4 class="app-card-title">Best Selling Brands</h4>
                            </div>
                            <div class="app-card-body p-3 p-lg-4">
                                <ul id="best-selling-brands" class="list-group"></ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        async function fetchCategorySalesData() {
            try {
                const response = await fetch('/order/categorySale', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const data = await response.json();
                console.log('result:', data);
                return data;
            } catch (error) {
                console.error('Error fetching data:', error);
                // Handle error
            }
        }

        async function drawPieChart() {
            const ctx = document.getElementById('pieChart').getContext('2d');
            const categorySalesData = await fetchCategorySalesData();

            const formattedData = categorySalesData.categoryWiseSale.map(category => [
                category._id,
                category.purchaseCount
            ]);
            new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: formattedData.map((data) => data[0]),
                    datasets: [
                        {
                            data: formattedData.map((data) => data[1]),
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.7)',
                                'rgba(54, 162, 235, 0.7)',
                                'rgba(255, 206, 86, 0.7)',
                                'rgba(75, 192, 192, 0.7)',
                                'rgba(153, 102, 255, 0.7)',
                                'rgba(255, 159, 64, 0.7)',
                            ],
                            borderColor: [
                                'rgba(255, 99, 132, 1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)',
                                'rgba(255, 159, 64, 1)',
                            ],
                            borderWidth: 1,
                        },
                    ],
                },
            });
        }

        // Function to fetch data for sales
        async function fetchSalesData(timeFrame) {
            try {
                const response = await fetch(`/order/barChart?timeFrame=${timeFrame}`, {
                    method: 'GET'
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Error fetching sales data:', error);
                throw error;
            }
        }

        // Function to draw the bar chart based on the selected time frame
        async function drawSalesChart(timeFrame) {
            const ctx = document.getElementById('salesChart').getContext('2d');

            try {
                // Fetch sales data from the server based on the selected time frame
                const salesData = await fetchSalesData(timeFrame);
                document.querySelector('.barSales').innerText = `${timeFrame} Sales`;

                // Check if a chart instance already exists on the canvas
                if (window.salesChartInstance) {
                    // Destroy the existing chart if it exists
                    window.salesChartInstance.destroy();
                }

                // Draw the new chart with the fetched sales data
                window.salesChartInstance = new Chart(ctx, {
                    type: 'bar',
                    data: salesData,
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true,
                            },
                        },
                    },
                });
            } catch (error) {
                console.error('Error drawing sales chart:', error);
            }
        }

        // Function to update the chart based on the selected time frame
        function updateChart() {
            const timeFrame = document.getElementById('timeFrame').value;
            drawSalesChart(timeFrame);
        }

        // Call the function to draw the bar chart when the page is loaded
        window.onload = function () {
            updateChart();
            drawPieChart();
        }

        async function fetchAndDisplayBestSelling(endpoint, elementId) {
            try {
                const response = await fetch(endpoint);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                const listElement = document.getElementById(elementId);
                listElement.innerHTML = '';
                data.forEach(item => {
                    const listItem = document.createElement('li');
                    listItem.className = 'list-group-item d-flex align-items-center';

                    if (item.productName) { // Check if the item is a product
                        // Create an image element and set its source
                        const img = document.createElement('img');
                        img.src = `${item.image}`; // Set the image source
                        img.width = '100'; // Set the width to 100 pixels
                        img.height = '100'; // Set the height to 100 pixels
                        listItem.appendChild(img); // Append the image to the list item
                    }

                    // Create a div to hold the product details
                    const detailsDiv = document.createElement('div');
                    detailsDiv.className = 'ms-3';

                    // Create a heading for product name or category/brand name
                    const nameHeading = document.createElement('h6');
                    nameHeading.textContent = item.productName || item.categoryName || item.brandName;

                    // Create a paragraph for total sold quantity
                    const totalSoldPara = document.createElement('p');
                    totalSoldPara.textContent = `Total Sold: ${item.totalSold}`;

                    // Append elements to the list item
                    detailsDiv.appendChild(nameHeading);
                    detailsDiv.appendChild(totalSoldPara);
                    listItem.appendChild(detailsDiv);
                    listElement.appendChild(listItem);
                });
            } catch (error) {
                console.error('Error fetching best-selling data:', error);
                alert('Failed to fetch best-selling data. Please check the console for more details.');
            }
        }

        // Initial fetch and display
        fetchAndDisplayBestSelling('/order/bestProduct', 'best-selling-products');
        fetchAndDisplayBestSelling('/order/bestCategory', 'best-selling-categories');
        fetchAndDisplayBestSelling('/order/bestBrand', 'best-selling-brands');

        async function fetchSalesSummary() {
            try {
                const response = await fetch('/order/sales-summary?startDate=2024-01-01&endDate=2024-12-31');
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                const data = await response.json();

                // Update HTML elements with fetched data
                document.getElementById('totalOrders').innerText = data.totalOrders;
                document.getElementById('totalSales').innerText = `â‚¹${data.totalSales}`;
                document.getElementById('totalDeliveredOrders').innerText = data.totalDeliveredOrders;
                document.getElementById('totalPendingOrders').innerText = data.totalPendingOrders;
            } catch (error) {
                console.error('Error fetching sales summary:', error);
                // Handle error
            }
        }

        fetchSalesSummary();
    </script>
</body>

</html>